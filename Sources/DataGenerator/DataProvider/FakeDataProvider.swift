/*
 This source file is part of SwiftAndTipsMacros

 Copyright (c) 2023 Pedro Rojas and project authors
 Licensed under MIT License
*/

//
//  FakeDataProvider.swift
//
//
//  Created by Pedro Rojas on 16/09/23.
//

import Foundation

struct FakeDataProvider: StringDataProvider {
   
    
    
    
    
    func firstName() -> String {
        return [
            "Jeanie",
            "Roselyn",
            "Giles",
            "Montana",
            "Maximillia",
            "Etha",
            "Tony",
            "Lila",
            "Malcolm",
            "Clare",
            "Sonny",
            "Jensen",
            "Erik",
            "Alvera",
            "Alysson",
            "Queenie",
            "Kadin",
            "Nyasia",
            "Christina",
            "Otis",
            "Brook",
            "Demetrius",
            "Janiya",
            "Cloyd",
            "Estell",
            "Rafaela",
            "Wilfrid",
            "Fletcher",
            "Justus",
            "Gilda",
            "Orion",
            "Johnnie",
            "Burnice",
            "Mandy",
            "Precious",
            "Margarette",
            "Nadia",
            "Emanuel",
            "Alysha",
            "Abigale",
            "Ariane",
            "Alec",
            "Declan",
            "Celestine",
            "Shaniya",
            "Amanda",
            "Rebeka",
            "Milo",
            "Bettye",
            "Marlene",
            "Alisa",
            "Sylvia",
            "Xavier",
            "Shanelle",
            "Lorna",
            "Felicia",
            "Deven",
            "Jayda",
            "Jesse",
            "Karolann",
            "Devin",
            "Cayla",
            "Nyah",
            "Eve",
            "Vicente",
            "Lauryn",
            "Lauren",
            "Pinkie",
            "Augustus",
            "Valentina",
            "Eladio",
            "Sabryna",
            "Jessie",
            "Emilia",
            "Gus",
            "Marc",
            "Bernardo",
            "Gavin",
            "Odie",
            "Gage",
            "Hertha",
            "Kristopher",
            "Darien",
            "Mya",
            "Domenica",
            "Enola",
            "Antonetta",
            "Michele",
            "Elian",
            "Lizzie",
            "Grace",
            "Jaren",
            "Gust",
            "Lonzo",
            "Buford",
            "Mitchell",
            "Enid",
            "Courtney",
            "Sherman",
            "Pitt"
        ].randomElement()!
    }
    
    func lastName() -> String {
        [
            "Hudson",
            "Osinski",
            "Grant",
            "Fay",
            "Lockman",
            "Krajcik",
            "Cummerata",
            "Fritsch",
            "Hintz",
            "Pollich",
            "Thompson",
            "Donnelly",
            "Schiller",
            "Hilll",
            "Rath",
            "Terry",
            "Rempel",
            "Klocko",
            "Nienow",
            "Schamberger",
            "Hamill",
            "Beer",
            "Schmidt",
            "Flatley",
            "Kovacek",
            "Metz",
            "Hauck",
            "Ratke",
            "Watsica",
            "Tromp",
            "Wisoky",
            "Bode",
            "Ruecker",
            "Ward",
            "Parisian",
            "Mante",
            "Maggio",
            "Schoen",
            "Schmitt",
            "Kris",
            "Schneider",
            "Swaniawski",
            "Jenkins",
            "Stark",
            "Morar",
            "Erdman",
            "Haag",
            "Koch",
            "Altenwerth",
            "West",
            "Robel",
            "Windler",
            "Wilderman",
            "Konopelski",
            "Wilkinson",
            "Schuppe",
            "Connelly",
            "Upton",
            "Nolan",
            "Yost",
            "Turcotte",
            "Hirthe",
            "Kertzmann",
            "Weber",
            "Lynch",
            "Feeney",
            "Daugherty",
            "Streich",
            "Botsford",
            "Cole",
            "Veum",
            "Ledner",
            "Schulist",
            "McLaughlin",
            "Vandervort",
            "Lang",
            "Mann",
            "O'Keefe",
            "Kunze",
            "Kassulke",
            "Sauer",
            "Gulgowski",
            "Hoppe",
            "Crist",
            "O'Kon",
            "Beahan",
            "Predovic",
            "Bechtelar",
            "Labadie",
            "Kling",
            "Johnston",
            "Ullrich",
            "Stehr",
            "Schinner",
            "Lemke",
            "Leuschke",
            "O'Reilly",
            "Kerluke",
            "Padberg",
            "Conn",
        ].randomElement()!
    }
    
    func fullName() -> String {
        [
            "Ms. Mable Tremblay",
            "Jerald Yundt",
            "Marquis Aufderhar",
            "Jannie Cummings",
            "Adrien Barton",
            "Raymundo Boehm",
            "Talon Rice",
            "Idell Auer",
            "Lindsey Berge",
            "Lance Schamberger",
            "Sylvan Kuhn",
            "Thalia Hermann V",
            "Jayce Schowalter",
            "Tillman Effertz",
            "Robbie Jones",
            "Lia Koepp",
            "Estel Ward",
            "Adolphus Kunze DVM",
            "Lewis Schumm",
            "Ms. Ardith Goldner",
            "Stanley Funk Jr.",
            "Mr. Corine Abernathy",
            "Stanley Schoen DVM",
            "Noemy Auer",
            "Chadrick Abshire Jr.",
            "Berta Cronin",
            "Ned Russel",
            "Mr. Hadley Reichel",
            "Ms. Hugh Mohr",
            "Trudie Bergstrom",
            "Damien Watsica",
            "Mrs. Leilani Wyman",
            "Jaden McGlynn",
            "Eliza Cronin",
            "Esta Rogahn",
            "Dr. Rowan Nitzsche",
            "Grover Predovic Jr.",
            "Paolo Jenkins",
            "Claud Ledner",
            "Allene Padberg I",
            "Everette Senger",
            "Kyler Kling Sr.",
            "Stefanie Hauck I",
            "Jodie Witting",
            "Courtney Klein II",
            "Chanelle Marvin DDS",
            "Adriel Littel",
            "Bill Brekke",
            "Roger Nikolaus",
            "Aida Monahan V",
            "Mr. Wanda Kreiger",
            "Carlo Connelly",
            "Tess Fahey V",
            "Mr. Wilbert Abbott",
            "Kiera Beatty III",
            "Alverta Doyle",
            "Miss Litzy Schuppe",
            "Roxanne Hackett",
            "Clark Morar PhD",
            "Judd Hoppe",
            "Delphia Stoltenberg V",
            "Ms. Robyn Ankunding",
            "Laura Hessel I",
            "Mrs. Vickie Monahan",
            "Romaine Kunde",
            "Ms. Maurice Towne",
            "Yvonne Torp",
            "Lula O'Keefe",
            "Daija Hickle Sr.",
            "Mrs. Aurelie Halvorson",
            "Kattie Pagac MD",
            "Waino Sporer",
            "Jayne Price",
            "Peter Ruecker",
            "Bella Halvorson",
            "Ms. Sammy Kautzer",
            "Tyrique Kilback",
            "Lizeth Lockman",
            "Alfonzo Cole",
            "Emmett Weber Sr.",
            "Wilma Streich",
            "Krystina Lowe III",
            "Elton Harvey",
            "Bobby Muller",
            "Eddie Lesch PhD",
            "Drake Walter",
            "Roma Jacobs IV",
            "Ms. Drake Reynolds",
            "Chasity D'Amore DVM",
            "D'angelo Langworth",
            "Aletha Armstrong",
            "Maxine Schmidt",
            "Nicholas Zemlak",
            "Laurel Klocko",
            "Hadley Green",
            "Dr. Estevan Moore",
            "Ms. Brandy Mitchell",
            "Evert Roob",
            "Devin Schmidt",
            "Aliza Smith",
        ].randomElement()!
    }
    
    func vin() -> String{
        [
            "1FMCU49H28KB15874",
            "KNDJX3A52E7730874",
            "2HKRM4H75FH606992",
            "3D4PG1FG7BT561647",
            "1G2ZJ57B494238579",
            "KMHDU46D28U518652",
            "2GNFLFE5XC6349811",
            "1B3HB48BX7D281660",
            "5TDZT34AX5S259487",
            "2G1WH52KX49265205",
            "3C4PDDBG5DT631811",
            "1GNDM19W6YB109055",
            "5YFBURHE0FP232761",
            "1NPAL00X32N581064",
            "1FMCU22X0NUD58881",
            "3FA6P0K96FR220842",
            "1HGCP2F74BA105342",
            "1LNHM83WX3Y637842",
            "1FAFP444XYF235644",
            "1ZVFT80N575238920",
            "WBSFV9C53DC773470",
            "JTDKN3DU0F1898675",
            "1G1PJ5SC1C7198138",
            "2C3CCAGG7EH146125",
            "1YVHP80C865M62335",
            "2GCEC19X531207821",
            "3C3CFFBR9CT357599",
            "1N4AA5APXEC496138",
            "JTKDE177X50058760",
            "2T1BURHE3EC173560",
            "JTDKDTB35C1517086",
            "1G1ZB5E1XBF190415",
            "1FMEU73E66UA67340",
            "3G5DA03E75S556691",
            "2C3CDYAG2CH162146",
            "1FUYDSEB4WL820370",
            "1N4AL3AP7FC181507",
            "3GCAAAFW5BS597130",
            "5NPDH4AE7FH553414",
            "1GCCS1446Y8132297",
            "2G61U5S35E9215855",
            "JNKBV61E47M721513",
            "2FMEK63C99BA12230",
            "1FTWW32PX5EC64969",
            "3N1BC1CP8CK256790",
            "KNADH4A37A6635352",
            "5TDZA22C16S469918",
            "3C3CFFCR2DT522943",
            "5XYKT3A13BG184534",
            "1HGCR2F32DA069922",
            "3GNFK16T01G127251",
            "5LMEU88H54ZJ12113",
            "1J4GZ78Y2WC273420",
            "1FTRW07322KC98886",
            "1GTHK29G51E336577",
            "4S3BNBC66F3036143",
            "WDBEA30D3HA474486",
            "2D4GV57238H126447",
            "3N1AB6APXBL708861",
            "2A8GP54L46R877139",
            "1C3CDFBA5DD149615",
            "1HVBBABM3XH644560",
            "5XXGM4A77DG163075",
            "2FAFP71W13X193062",
            "2FMDK3GC6DBC70265",
            "JM1BK34L671719153",
            "JT8UF11E7M0092776",
            "1C3CCBBB8DN734428",
            "1FTFW1EF2BKD14624",
            "1GHDX03E63D234543",
            "1N4BL21E37C131380",
            "1FDKF37G2SNB16071",
            "JTDKN3DU5B5327590",
            "YV126MFK7F1343862",
            "1FAFP40462F154640",
            "WBANW1C57AC165929",
            "3C6UR5CL1EG320593",
            "2MEFM75V78X656851",
            "1FMPU16L73LB76536",
            "3VW4A7AT4CM630165",
            "KMHFC46F26A094658",
            "1YVGF22D415247822",
            "1G1PF5SC3C7176742",
            "2T2GK31UX7C018142",
            "1ZVFT82H675305287",
            "1P3EJ46X5WN215397",
            "3MZBM1U71EM102659",
            "1FDJF3794ENA76822",
            "1GCJK33255F859389",
            "1FABP45E7KF285253",
            "1GNFK13087J141965",
            "WDCYR49E23X137476",
            "3GCPKSE79DG308490",
            "1FTYR14V83PB33833",
            "5KBCP3F88AB013445",
            "1HFSC2206LA201821",
            "KNAGD126X65458664",
            "19XFB2F54FE017757",
            "1GNCS13W22K230263",

        
        
        ].randomElement()!
    }
    func vehicleMake() -> String{
        return [
            "Acura", "Alfa Romeo", "Aston Martin", "Audi", "Bentley", "BMW", "Bugatti",
            "Buick", "Cadillac", "Chevrolet", "Chrysler", "Citroen", "Dodge", "Ferrari",
            "Fiat", "Ford", "Genesis", "GMC", "Honda", "Hyundai", "Infiniti", "Jaguar",
            "Jeep", "Kia", "Koenigsegg", "Lamborghini", "Land Rover", "Lexus", "Lincoln",
            "Lotus", "Maserati", "Mazda", "McLaren", "Mercedes-Benz", "Mini", "Mitsubishi",
            "Nissan", "Pagani", "Peugeot", "Porsche", "Ram", "Renault", "Rolls-Royce",
            "Saab", "Saturn", "Scion", "Seat", "Skoda", "Smart", "Subaru", "Suzuki",
            "Tesla", "Toyota", "Volkswagen", "Volvo", "Abarth", "Alpina", "AMC", "Apollo",
            "Ariel", "Ascari", "Aston Martin", "Austin", "BAC", "Baojun", "Bowler", "Brabham",
            "Brilliance", "Bristol", "BYD", "Cadillac", "Caterham", "Changan", "Chery",
            "Chevrolet", "Chrysler", "Citroen", "Cupra", "Dacia", "Daewoo", "Daihatsu",
            "Datsun", "De Tomaso", "Dodge", "Donkervoort", "DS", "Eagle", "Ferrari", "Fiat",
            "Fisker", "Force", "Ford", "Foton", "GAZ", "Geely", "Genesis", "Ginetta",
            "GMC", "Great Wall", "Haval", "Holden", "Honda", "Hummer", "Hyundai", "Infiniti"
        ].randomElement()!
    }
    
    func vehicleModel() -> String{
        let modelsByMake: [String: [String]] = [
            "Tesla": ["Model S", "Model 3", "Model X", "Model Y"], // Tesla
            "Honda": ["Civic", "Accord", "CR-V", "Pilot"], // Honda
            "Toyota": ["Corolla", "Camry", "RAV4", "Highlander"], // Toyota
            "BMW": ["3 Series", "5 Series", "X5", "M3"], // BMW
            "Mercedes-Benz": ["C-Class", "E-Class", "S-Class", "GLE"], // Mercedes-Benz
            "Porsche": ["911", "Cayenne", "Taycan", "Panamera"], // Porsche
            "Jeep": ["Wrangler", "Grand Cherokee", "Cherokee", "Renegade"], // Jeep
            "Audi": ["Q5", "A4", "A6", "TT"], // Audi
            "Subaru": ["Outback", "Forester", "Impreza", "Legacy"], // Subaru
            "Mazda": ["CX-5", "Mazda3", "Mazda6", "MX-5 Miata"], // Mazda
            "Land Rover": ["Range Rover", "Discovery", "Defender", "Evoque"], // Land Rover
            "Lamborghini": ["Aventador", "Huracan", "Urus", "Gallardo"], // Lamborghini
            "Bugatti": ["Veyron", "Chiron", "Divo", "Centodieci"], // Bugatti
            "Volkswagen": ["Golf", "Passat", "Tiguan", "Arteon"], // Volkswagen
            "Volvo": ["S60", "XC90", "V90", "XC40"], // Volvo
            "Alfa Romeo": ["Giulia", "Stelvio", "4C", "Giulietta"], // Alfa Romeo
            "Dodge": ["Challenger", "Charger", "Durango", "Journey"], // Dodge
            "Cadillac": ["CT4", "CT5", "Escalade", "XT5"], // Cadillac
            "Nissan": ["Rogue", "Altima", "Leaf", "Murano"], // Nissan
            "Chevrolet": ["Sonic", "Malibu", "Equinox", "Traverse","Silverado", "Camaro", "Tahoe", "Suburban"], // Chevrolet
            "Ford": ["Fiesta", "Focus", "Edge", "Bronco","Mustang", "Explorer", "Escape"] // Ford
        ]
        
            return modelsByMake.randomElement()!.value.randomElement()!
        
    }
    
    func vehicleYear() -> String {
        return String(Int.random(in: 2020...2024))
    }
    
    func email() -> String {
        [
            "arlofisher3550@example.org",
            "trekling@example.org",
            "jaunitabode3564@example.net",
            "toymueller@example.org",
            "adelinehammes@example.com",
            "jeffryparisian@example.org",
            "andersonlueilwitz@example.com",
            "stanbergnaum@example.com",
            "luigihilll2861@example.net",
            "flaviooreilly3590@example.com",
            "joanabecker3806@example.org",
            "adolfoerdman8750@example.net",
            "bennycrooks8272@example.org",
            "janaeweissnat@example.com",
            "nickschaden1805@example.net",
            "elsieparisian9900@example.net",
            "raymundokris7319@example.com",
            "davionreinger@example.org",
            "sheldondickinson@example.net",
            "ezequielgerlach@example.org",
            "braedenhayes9728@example.net",
            "justynokeefe6787@example.com",
            "jeremielebsack@example.net",
            "delphinemertz@example.com",
            "idawisozk@example.net",
            "courtneyswift@example.com",
            "myrtismcdermott@example.net",
            "margretpredovic2100@example.com",
            "andreannehomenick@example.net",
            "malcolmjones1807@example.org",
            "kiangibson@example.net",
            "assuntakuhn@example.org",
            "javonteschaefer895@example.org",
            "arliepacocha6522@example.net",
            "kayliharris6253@example.net",
            "cathrineklein9566@example.net",
            "llewellynswift7805@example.net",
            "pearlkunze4733@example.com",
            "yvonnemarquardt126@example.com",
            "brionnakilback1360@example.net",
            "lauryortiz1968@example.org",
            "kaileyturner@example.com",
            "giovannihoppe8589@example.org",
            "dorotheaskiles9400@example.net",
            "mandyborer@example.net",
            "lolitakoss@example.com",
            "harveyzboncak2755@example.org",
            "johnathandamore@example.com",
            "korbinrau@example.com",
            "josiahrunolfsson@example.org",
            "chaimcronin@example.net",
            "bartonkirlin@example.com",
            "kipbeer7161@example.net",
            "mortonfay641@example.net",
            "floydschumm@example.org",
            "garrettlind7328@example.net",
            "ronaldobernhard4818@example.com",
            "adelereynolds@example.net",
            "chandlerortiz@example.org",
            "ubaldocummings4532@example.com",
            "francescokunde@example.net",
            "othakilback@example.org",
            "tyrelokuneva1212@example.com",
            "jaquelineschoen@example.com",
            "amelienienow@example.org",
            "kaseydooley@example.com",
            "jaredcrooks8426@example.net",
            "abigailwhite@example.org",
            "laurelmonahan@example.com",
            "magnoliasimonis@example.com",
            "reymundohegmann6771@example.net",
            "jacklesch@example.org",
            "jamesonvonrueden5647@example.org",
            "noemygulgowski7044@example.com",
            "wilhelmwalsh7734@example.net",
            "velmasmitham@example.com",
            "broderickkoss@example.com",
            "jimmierice@example.net",
            "adanfahey1357@example.net",
            "ralphbode953@example.org",
            "talonchamplin5439@example.net",
            "francomayer1718@example.com",
            "alanvonrueden6307@example.com",
            "tamaramcglynn507@example.org",
            "federicoabshire@example.org",
            "michelleoreilly6005@example.com",
            "adrianfay387@example.com",
            "rosaleecrona2661@example.com",
            "ardithgrady1155@example.com",
            "todmoore2778@example.com",
            "broderickhauck6843@example.com",
            "norberthilll@example.org",
            "mikelheathcote@example.com",
            "allenlemke@example.net",
            "dalesmitham@example.net",
            "aliciakris@example.com",
            "keonpurdy9306@example.com",
            "virgilbailey4305@example.net",
            "cassidyschinner@example.net",
            "asaswift@example.com",
        ].randomElement()!
    }
    
    func address() -> String {
        [
            "177 Barton Park Suite 325, Port Desireefort, ND 63460-2938",
            "799 Brown Junction Suite 862, Lake Constance, NH 42691",
            "150 Hand Spring Apt. 212, Lake Elizabethburgh, KY 07372-7861",
            "8940 Brycen Mount Suite 549, North Kaelynmouth, AZ 21970",
            "7253 Geo Meadows Suite 004, North Randiview, NM 37030-4812",
            "835 Hilpert Square Suite 651, Johathanshire, AR 24800",
            "8301 Jacobson Drive Apt. 342, Port Ed, VA 60132",
            "7731 Tavares Fields Suite 211, Parisianview, MS 01372",
            "21283 Mann Mews Suite 732, Port Eliasborough, OK 53768-4104",
            "1331 Dooley Hill Apt. 415, Oswaldton, CA 75322",
            "4934 Paolo Causeway Suite 008, Lake Enriquestad, AL 01847",
            "66455 Jordi Course Apt. 550, South David, MT 68319",
            "31741 Koepp Pike Suite 386, Monahanbury, OH 47436-3352",
            "756 Kayli Ford Suite 643, Schummview, ME 54129-4394",
            "73059 Padberg Mountains Apt. 530, Charlenestad, NH 60840-9654",
            "56710 Orville Spur Suite 499, New Josiane, TN 64396",
            "4443 Nella Center Apt. 459, Buckridgefort, FL 13356-8528",
            "090 Hettinger Pass Suite 289, Joannieview, FL 51210-6637",
            "8090 Jerde Street Apt. 043, Port Dudley, IA 66665-2011",
            "22975 Mante Flats Apt. 304, Lockmanstad, AK 78861-4028",
            "6661 Feest Springs Suite 930, Schadenchester, AZ 86593",
            "144 Jazmyn Roads Suite 997, East Sierraville, TN 12466",
            "12754 Cummings Keys Apt. 194, Abbieport, VT 87222",
            "5374 Kurtis Shore Apt. 165, West Nigelton, DE 30015",
            "3889 Jocelyn Estate Suite 861, Port Freedaview, OK 38262-8125",
            "60807 Schimmel Flat Suite 437, Beattyhaven, PA 77437",
            "822 Stehr Cliff Apt. 749, Port Callie, MA 37497",
            "04991 Neil Rapid Suite 915, Lakinhaven, LA 64422",
            "8733 Frieda Ville Suite 476, Venaland, GA 30813",
            "8278 Clemens Garden Suite 149, New Augustusbury, MT 25632-9353",
            "7353 Wilderman Square Suite 200, North Joelletown, UT 57604",
            "49174 Gleichner Village Suite 784, Coleview, CA 45514",
            "221 Ernser Turnpike Suite 964, North Hallemouth, AL 33709-8164",
            "5211 Kertzmann Expressway Apt. 037, Kamrenhaven, ND 68425",
            "357 Elvera Harbor Apt. 641, Langworthview, LA 24085",
            "73639 Dietrich Shore Suite 108, East Elena, PA 72253-8763",
            "82166 Heathcote Grove Apt. 980, Port Hester, IA 35828",
            "842 Blick Loop Suite 242, Eichmannfort, ME 16750",
            "21025 Hessel Islands Apt. 618, Port Nellie, TX 86126",
            "79884 Windler Spurs Apt. 349, Imogenestad, VT 07028",
            "79825 Smitham Run Suite 829, Lake Vallie, IA 86441-5452",
            "0830 Estel Isle Suite 871, Boscomouth, UT 06972",
            "72547 Krajcik Plaza Apt. 112, Christbury, PA 78077-1242",
            "48703 Mallory Corners Apt. 211, Treutelland, CO 52572",
            "3123 Lehner Camp Apt. 101, Mooreland, ID 58905-3568",
            "4949 Runte Isle Suite 479, Easterport, TN 37137-4856",
            "86293 Swaniawski Expressway Suite 578, Lake Warrenbury, IN 40174",
            "8918 Dayna Views Apt. 036, Goldnerhaven, OR 73988-4256",
            "2727 Reichel Road Apt. 682, Daxhaven, GA 69351",
            "83909 Dedric Ways Apt. 192, South Rylan, OH 27334",
            "08045 Rutherford Square Suite 811, North Cynthia, VA 65335",
            "43100 Raynor Loaf Suite 869, Volkmanland, OR 57721-7001",
            "54294 Altenwerth Expressway Suite 794, South Easton, IL 76029-7695",
            "27690 Paucek Mountains Apt. 226, Lake Craig, TX 57731",
            "8255 Frami Plaza Suite 600, Yostberg, NE 85415-7929",
            "483 Abshire Common Apt. 791, Port August, WV 59609-0461",
            "8825 Olson Ramp Apt. 058, Jaylanmouth, NJ 29945-3355",
            "07838 Bahringer Expressway Suite 651, Ayanaside, WY 43205-3887",
            "31162 Arthur Vista Apt. 082, Colinport, KS 11783",
            "3062 Precious Creek Apt. 891, Lake Ozella, SC 70946-3911",
            "3368 Belle Plaza Apt. 266, Desmondfort, ME 43823",
            "8865 Hoyt Forges Suite 759, South Simchester, FL 15249",
            "61275 Shanelle Villages Apt. 581, Port Amirburgh, MN 62469",
            "499 Annabel Cove Suite 871, Pourosside, NC 77009-8290",
            "48987 Toby Pine Suite 324, Hirthebury, TX 00951-2528",
            "40218 Charlotte Locks Apt. 014, Lambertborough, NH 54003",
            "66776 Gaetano Coves Apt. 367, Elainahaven, MO 46698-5098",
            "8017 Francesca Extension Suite 097, Lake Drewfort, NJ 30136-7780",
            "40585 Gerda Flat Apt. 055, East Theresehaven, NV 82240",
            "10110 Amira Isle Apt. 128, Nicolettechester, RI 39686-8395",
            "439 Luther Wall Suite 483, Lake Alvaburgh, IA 28963-3861",
            "7417 Haley Forks Suite 483, West Moshe, MD 19133-8552",
            "03878 Streich Route Suite 328, Aftonshire, NJ 32088",
            "14091 Eula Branch Suite 117, Verdaton, NM 21829",
            "6760 Nils Mall Suite 390, Kesslerstad, WV 53577-7421",
            "1428 Emilio Hills Apt. 207, Lake Merle, MS 77552-7837",
            "2672 Adolf Pike Apt. 444, Keonshire, MS 38192-0949",
            "1414 Nathanael Corner Suite 722, Nolanshire, GA 02881-8398",
            "439 Denesik Lake Apt. 711, McGlynnstad, MA 32681",
            "831 Delta Key Suite 194, South Estevan, MO 39701",
            "157 Collins Ranch Apt. 400, North Montanaport, TN 22513",
            "69905 Ferry Groves Apt. 674, New Annamarieville, CA 83186",
            "663 Pouros Greens Suite 322, McCulloughmouth, LA 13810",
            "647 Stroman Meadow Apt. 788, Rethaborough, OK 09180-5044",
            "17655 Nya Green Suite 462, New Thorahaven, IN 37499",
            "40763 Bernhard Radial Apt. 553, Kimberlyfurt, UT 37180",
            "2714 Bogan Spur Suite 346, West Dahliafort, NV 28971-6746",
            "5083 Louvenia Meadows Suite 374, Geraldshire, MA 07497-3884",
            "4997 Kacie Trail Apt. 133, West Kiera, TN 35280-1589",
            "14218 Conrad Throughway Suite 710, Karastad, NY 74518",
            "322 Jacobi Mount Apt. 668, Murrayville, IA 14531-8860",
            "4374 Kirsten Spur Apt. 924, North Armand, IL 57879",
            "077 Missouri Forges Apt. 570, New Heidi, NM 36602",
            "7133 Cormier Station Apt. 410, Reichelburgh, ND 12390",
            "885 Lakin Meadow Suite 575, McGlynnport, OK 21059-6767",
            "66852 Luciano Plain Suite 371, Port Desmond, WA 02650-0511",
            "616 Alphonso Camp Apt. 402, New Jermaineton, ID 81255-9963",
            "33532 Hermann Mountain Apt. 955, Lake Reggie, WY 58507-1096",
            "33991 Rex Inlet Suite 071, Imaburgh, WV 01370-9523",
            "075 Lynch Manors Apt. 472, Blockton, CT 05388-1223",
        ].randomElement()!
    }
    
    func appVersion() -> String {
        [
            "0.4.3",
            "0.4.1",
            "7.00",
            "0.77",
            "2.50",
            "0.0.9",
            "2.43",
            "6.16",
            "0.50",
            "0.2.3",
            "0.3.1",
            "0.6.7",
            "1.4",
            "7.6.1",
            "7.27",
            "0.2.1",
            "0.69",
            "5.5",
            "0.9.1",
            "8.43",
            "6.03",
            "2.56",
            "2.68",
            "8.6",
            "3.38",
            "0.66",
            "6.6.1",
            "2.8.7",
            "0.4.8",
            "0.8.7",
            "4.8.8",
            "7.2",
            "0.7.4",
            "0.31",
            "0.7.2",
            "5.2.3",
            "1.23",
            "0.91",
            "6.33",
            "0.4.6",
            "0.4.7",
            "5.47",
            "0.59",
            "0.84",
            "2.1",
            "0.5.3",
            "0.49",
            "0.41",
            "0.58",
            "4.09",
            "7.5",
            "0.23",
            "3.7",
            "0.1.6",
            "3.1.9",
            "0.1.3",
            "0.8.3",
            "1.5",
            "5.72",
            "0.6.2",
            "6.2",
            "5.50",
            "0.3.6",
            "0.61",
            "0.5.4",
            "2.5",
            "3.8.4",
            "8.51",
            "6.34",
            "3.35",
            "0.8.9",
            "0.62",
            "6.8",
            "8.9",
            "2.2.6",
            "7.7.4",
            "8.5.5",
            "2.7.5",
            "8.0.8",
            "7.9.2",
            "0.3.7",
            "0.96",
            "0.0.1",
            "0.35",
            "8.1",
            "8.08",
            "0.94",
            "0.04",
            "0.0.4",
            "4.18",
            "0.52",
            "2.9",
            "6.3.8",
            "1.90",
            "0.67",
            "8.40",
            "6.48",
            "5.73",
            "0.2.0",
            "0.9",
        ].randomElement()!
    }
    
    func username() -> String {
        [
            "janieveum1600",
            "yazminzemlak1251",
            "stefaniewilliamson1015",
            "delilahdickinson8049",
            "eudorarosenbaum7658",
            "spencerbogisich7403",
            "ryleighbuckridge",
            "macieprosacco",
            "fanniekris8708",
            "haliesmitham6746",
            "bryonsipes5057",
            "vincentjohns223",
            "brigitteflatley6081",
            "patiencewaelchi1859",
            "kayleyhuel",
            "andreschaefer8206",
            "kimberlybergstrom",
            "mateojohnston",
            "lelahdaugherty",
            "kentonmarks7611",
            "aliarippin2563",
            "dorothywolf",
            "pascaledach8742",
            "johnsonpacocha3938",
            "ulisesstokes2664",
            "tadernser",
            "lourdesrobel330",
            "linniemacgyver4720",
            "samarahilll",
            "dellawiza",
            "cedrickgreenholt5510",
            "connordubuque4308",
            "altheagleichner9456",
            "maverickkuphal5033",
            "marleneschiller8703",
            "jeremywunsch",
            "audrasteuber",
            "brodyrutherford7780",
            "earnestgrady",
            "mayragerlach",
            "aracelidaniel605",
            "ariannawalker2848",
            "fabianspinka",
            "leonorking",
            "karlierobel5058",
            "edmunddooley",
            "koryturcotte",
            "pinkvandervort",
            "stephaniewilliamson",
            "dejondurgan8529",
            "felicianikolaus2818",
            "chaddpadberg",
            "kristophermacgyver2575",
            "emilianoruecker8314",
            "natashawalter",
            "rheaspencer67",
            "alfredolabadie",
            "penelopeconroy",
            "wilbertmorissette8557",
            "mariettamurray",
            "lennastehr4451",
            "louiecollins9022",
            "perryjaskolski1406",
            "lacyfeeney",
            "antoninapouros",
            "estellakiehn",
            "raulkreiger",
            "daisymurphy",
            "edwinaborer",
            "herminioharris",
            "zellabeer5557",
            "erikaokon",
            "ikejakubowski",
            "jaquelinmedhurst9455",
            "marisollarkin2129",
            "jamisonbartoletti5230",
            "onaconnelly7806",
            "lindajacobi",
            "cheyennewiza2766",
            "biankakshlerin",
            "aidanhomenick",
            "berryhammes9250",
            "damonrosenbaum7055",
            "declanbergnaum",
            "miguelrempel",
            "katelinwuckert1234",
            "sonyahilpert",
            "georgettebechtelar",
            "claudieschumm6139",
            "maudeherman8063",
            "paulaspencer3431",
            "olliebeer7703",
            "chadcummings9186",
            "rosannathiel",
            "madalynrau470",
            "florinerogahn",
            "enriquedickinson4162",
            "danielavon3687",
            "hattiehegmann666",
            "mozellreinger",
        ].randomElement()!
    }
    
    func creditCardNumber() -> String {
        [
            "1211-1221-1234-2201",
            "1211-1221-1234-2201",
            "1234-2121-1221-1211",
            "1228-1221-1221-1431",
            "1211-1221-1234-2201",
            "1212-1221-1121-1234",
            "1234-2121-1221-1211",
            "1228-1221-1221-1431",
            "1211-1221-1234-2201",
            "1211-1221-1234-2201",
            "1228-1221-1221-1431",
            "1234-2121-1221-1211",
            "1212-1221-1121-1234",
            "1234-2121-1221-1211",
            "1211-1221-1234-2201",
            "1234-2121-1221-1211",
            "1234-2121-1221-1211",
            "1212-1221-1121-1234",
            "1234-2121-1221-1211",
            "1234-2121-1221-1211",
        ].randomElement()!
    }
    
    func companyName() -> String {
        [
            "Ondricka and Sons",
            "Collier, Schmitt and Abbott",
            "Erdman, Heaney and Cartwright",
            "Greenholt, Howell and Gutmann",
            "Marks-Stoltenberg",
            "Ortiz and Sons",
            "Zboncak, Pouros and King",
            "Bogisich, Hoeger and White",
            "Herzog LLC",
            "Wehner, Auer and Swaniawski",
            "Hilll-Runte",
            "Bins-Tremblay",
            "Halvorson LLC",
            "Jerde and Sons",
            "Kovacek-Dach",
            "Gleichner LLC",
            "Ernser, King and Bayer",
            "Larson Inc",
            "Howell, Doyle and Strosin",
            "Herman, Lockman and Schiller",
        ].randomElement()!
    }
}

extension FakeDataProvider: BooleanDataProvider {
    func randomBool() -> Bool {
        Bool.random()
    }
}

extension FakeDataProvider: DateDataProvider {
    func date() -> Date {
        let years = 5
        let daysInYears = 365.25 // Consider average year including leap years
        let secondsInADay = 24.0 * 60.0 * 60.0
        
        // Current date as the start date
        let startDate = Date()
        
        // Maximum number of seconds in the specified number of years
        let maxSeconds = Int(daysInYears * Double(years) * secondsInADay)
        
        // Generate a random interval
        let randomInterval = TimeInterval(Int.random(in: 0..<maxSeconds))
        
        // Generate the random date
        return startDate.addingTimeInterval(randomInterval)
    }
}

extension FakeDataProvider: URLDataProvider {
    func image(width: Int, height: Int) -> URL {
        URL(string: "https://picsum.photos/\(width)/\(height)")!
    }
    
    func url() -> URL {
        [
            URL(string: "https://www.google.com")!,
            URL(string: "https://www.youtube.com")!,
            URL(string: "https://www.facebook.com")!,
            URL(string: "https://www.wikipedia.org")!,
            URL(string: "https://www.amazon.com")!,
            URL(string: "https://www.twitter.com")!,
            URL(string: "https://www.instagram.com")!,
            URL(string: "https://www.linkedin.com")!,
            URL(string: "https://www.netflix.com")!,
            URL(string: "https://www.microsoft.com")!,
            URL(string: "https://www.apple.com")!,
            URL(string: "https://www.whatsapp.com")!,
            URL(string: "https://www.tiktok.com")!,
            URL(string: "https://www.ebay.com")!,
            URL(string: "https://www.reddit.com")!,
            URL(string: "https://www.spotify.com")!,
            URL(string: "https://www.airbnb.com")!,
            URL(string: "https://www.zoom.us")!,
            URL(string: "https://www.adobe.com")!,
            URL(string: "https://www.paypal.com")!,
        ].randomElement()!
    }
}

extension FakeDataProvider: NumericDataProvider {
    func randomInt(min: Int, max: Int) -> Int {
        Int.random(in: min...max)
    }
    
    func randomFloat(min: Float, max: Float) -> Float {
        Float.random(in: min...max)
    }
    
    func randomDouble(min: Double, max: Double) -> Double {
        Double.random(in: min...max)
    }
    
    func price() -> Double {
        [
            84.96,
            72.04,
            63.48,
            80.62,
            45.55,
            46.4,
            40.7,
            21.23,
            20.15,
            28.01,
            19.49,
            86.12,
            40.12,
            19.98,
            41.68,
            46.8,
            35.82,
            58.51,
            98.82,
            71.84,
            22.39,
            45.62,
            76.35,
            26.21,
            35.85,
            91.68,
            53.73,
            24.21,
            35.21,
            36.59,
            16.54,
            4.75,
            20.16,
            18.45,
            34.12,
            52.56,
            31.26,
            93.89,
            87.46,
            89.04,
            97.78,
            3.41,
            28.47,
            17.54,
            10.71,
            82.31,
            5.48,
            4.87,
            19.73,
            60.29,
            96.39,
            81.48,
            95.49,
            44.81,
            97.65,
            55.3,
            22.56,
            30.64,
            60.26,
            44.66,
            4.59,
            86.96,
            89.16,
            85.95,
            6.67,
            26.79,
            64.61,
            35.11,
            98.29,
            60.99,
            94.85,
            87.54,
            67.08,
            34.62,
            69.71,
            54.9,
            58.52,
            95.12,
            78.12,
            0.88,
            6.94,
            98.21,
            40.37,
            60.3,
            69.56,
            16.81,
            57.56,
            29.51,
            16.67,
            11.87,
            57.2,
            86.24,
            71.05,
            12.04,
            61.44,
            61.72,
            34.68,
            57.51,
            69.06,
            3.45,
        ].randomElement()!
    }
}
